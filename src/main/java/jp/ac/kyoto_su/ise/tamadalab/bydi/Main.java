package jp.ac.kyoto_su.ise.tamadalab.bydi;

import java.io.IOException;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Predicate;

public class Main {
    public void run(String[] args) {
        performIf((array) -> array.length != 2, () -> printHelp(),
                (array) -> perform(array), args);
    }

    private void printHelp() {
        System.out.println("java bydi.jar <original.csv> <obfuscated.csv>");
        System.out.println("    original.csv and obfuscated.csv were generated by extractor.Main.");
    }

    private void perform(String[] args) {
        try {
            CsvDataParser parser = new CsvDataParser();
            calculate(parser.parse(args[0]), parser.parse(args[1]));
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    private void calculate(CsvData original, CsvData obfuscated) {
        System.err.println("read done");
        EditDistanceCalculator calculator = new EditDistanceCalculator();
        original.stream()
        .forEach(data -> calculateAndPrint(data, obfuscated, calculator));
    }

    private void calculateAndPrint(Data data1, CsvData obfuscated, EditDistanceCalculator calculator) {
        Optional<Data> data2 = obfuscated.remove(data1.getName(), data1.getMethodName(), data1.getParameters());
        data2.ifPresentOrElse(d2 -> print(data1, d2, calculator.calculate(data1.getData(), d2.getData())),
                () -> printNotFound(data1));
    }

    private void printNotFound(Data data) {
        System.out.printf("%s,%s,%s,%d,,,not found%n", data.getName(), data.getMethodName(),
                data.getParameters(), data.getData().length);
    }

    private void print(Data data1, Data data2, int distance) {
        System.out.printf("%s,%s,%s,%d,%d,%d%n", data1.getName(), data1.getMethodName(), data1.getParameters(),
                data1.getData().length, data2.getData().length, distance);
    }

    private <T> void performIf(Predicate<T> predicate, Runnable errorAction, Consumer<T> action, T arguments) {
        if(predicate.test(arguments))
            errorAction.run();
        else
            action.accept(arguments);
    }
    
    public static void main(String[] args) {
        Main main = new Main();
        main.run(args);
    }
}
