package jp.ac.kyoto_su.ise.tamadalab.bydi;

import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Predicate;

import jp.ac.kyoto_su.ise.tamadalab.bydi.entities.Method;
import jp.ac.kyoto_su.ise.tamadalab.bydi.extractor.DataPool;

public class Main {
    public void run(String[] args) {
        performIf((array) -> array.length != 2, () -> printHelp(),
                (array) -> perform(array), args);
    }

    private void printHelp() {
        System.out.println("java bydi.jar <original.csv|jar> <obfuscated.csv|jar>");
        System.out.println("    original.csv and obfuscated.csv were generated by extractor.Main.");
    }

    private void perform(String[] args) {
        BydiProcessor processor = new DefaultBydiProcessor();
        calculate(processor.extract(args[0]), processor.extract(args[1]));
    }

    private void calculate(Optional<DataPool> original, Optional<DataPool> obfuscated) {
        if(original.isPresent() && obfuscated.isPresent()) {
            calculate(original.get(), obfuscated.get());
        }
    }

    private void calculate(DataPool original, DataPool obfuscated) {
        System.err.println("read done");
        EditDistanceCalculator calculator = new EditDistanceCalculator();
        original.stream()
        .forEach(data -> calculateAndPrint(data, obfuscated, calculator));
    }

    private void calculateAndPrint(Method data1, DataPool obfuscated, EditDistanceCalculator calculator) {
        Optional<Method> data2 = obfuscated.find(data1.className(), data1.methodName(), data1.signature());
        data2.ifPresentOrElse(d2 -> print(data1, d2, calculator.calculate(data1.opcodes(), d2.opcodes())),
                () -> printNotFound(data1));
    }

    private void printNotFound(Method data) {
        System.out.printf("%s,%s,%s,%d,,,not found%n", data.className(), data.methodName(),
                data.signature(), data.opcodes().length);
    }

    private void print(Method data1, Method data2, int distance) {
        System.out.printf("%s,%s,%s,%d,%d,%d%n", data1.className(), data1.methodName(), 
                data1.signature(), data1.opcodes().length, data2.opcodes().length,
                distance);
    }

    private <T> void performIf(Predicate<T> predicate, Runnable errorAction, Consumer<T> action, T arguments) {
        if(predicate.test(arguments))
            errorAction.run();
        else
            action.accept(arguments);
    }
    
    public static void main(String[] args) {
        Main main = new Main();
        main.run(args);
    }
}
